import os
import re
import threading
import asyncio
from flask import Flask, request
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, filters, CommandHandler
)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# === Telegram Application ===
application = ApplicationBuilder().token(BOT_TOKEN).build()

# === –°–ª–æ–≤–Ω–∏–∫ –¥—ñ–π —Ç–∞ —ñ–º–µ–Ω (–∑–∞–ª–∏—à –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –Ω–∞–ø–æ–≤–Ω–∏) ===
name_declensions = {}
verb_conjugation = {}

def convert_infinitive_to_past(verb: str, gender: str = "male") -> tuple[str, str]:
    forms = verb_conjugation.get(verb.lower())
    if not forms:
        return (verb, "")
    return (forms[0] if gender == "male" else forms[2], forms[1])

def decline_name(name: str) -> tuple[str, str]:
    return name_declensions.get(name, (name, "male"))

# === –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.first_name
    buttons = [
        [KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è")],
        [KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º"), KeyboardButton("üî• –ü–æ—á–∞—Ç–∏ —Ä–æ–ª—å–æ–≤—É –¥—ñ—é")],
        [KeyboardButton("üìú –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")]
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    text = f"–ü—Ä–∏–≤—ñ—Ç, {user}! –Ø –≤–∞—à —Ä–æ–ª—å–æ–≤–∏–π –±–æ—Ç ü§ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –¥—ñ–π!"
    await update.message.reply_text(text, reply_markup=markup)

# === –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –¥—ñ–π /–¥—ñ—è @–Ü–º'—è [—Ç–µ–∫—Å—Ç] ===
async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    user_name = update.effective_user.first_name

    match = re.match(r'^/([\w\s—ñ—Ç–∞—ñ—î—é]+?)\s+@(\S+)(?:\s+(.+))?', text, re.IGNORECASE)
    if not match:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç:\n/–¥—ñ—è @–Ü–º'—è [—Ç–µ–∫—Å—Ç]")
        return

    action_input = match.group(1).strip()
    target_raw = match.group(2).lstrip("@").strip()
    message_text = match.group(3) or ""

    target_name_accusative, gender = decline_name(target_raw)
    past_verb, emoji = convert_infinitive_to_past(action_input, gender)

    target_display = f"{emoji} *{target_name_accusative}*" if emoji else f"*{target_name_accusative}*"
    response = f'‚ú® {user_name} {past_verb} {target_display}'
    if message_text:
        response += f' –∑—ñ —Å–ª–æ–≤–∞–º–∏: "{message_text}"'

    await update.message.reply_text(response, parse_mode="Markdown")

# === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è":
        msg = "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/–¥—ñ—è @–Ü–º'—è —Ç–µ–∫—Å—Ç`\n–ü—Ä–∏–∫–ª–∞–¥: `/–æ–±—ñ–π–Ω—è—Ç–∏ @–ú–∞—à–∞ –¢–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∞!`"
        await update.message.reply_text(msg, parse_mode="Markdown")
    elif text == "üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º":
        await update.message.reply_text("–†–æ–∑—Ä–æ–±–Ω–∏–∫: @shadow_tar")
    elif text == "üî• –ü–æ—á–∞—Ç–∏ —Ä–æ–ª—å–æ–≤—É –¥—ñ—é":
        await update.message.reply_text("–î–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –≤ —á–∞—Ç: https://t.me/BugaichyBot?startgroup=botstart")
    elif text == "üìú –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏":
        await update.message.reply_text("–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥—É—Ç—å –∫–æ–º–∞–Ω–¥–∏!", parse_mode="Markdown")

# === –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ ===
application.add_handler(CommandHandler("start", start_command))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/'), handle_command))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

# === Flask-—Å–µ—Ä–≤–µ—Ä ===
flask_app = Flask(__name__)

@flask_app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    asyncio.run(application.process_update(update))
    return "ok"

@flask_app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ webhook!"

# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —ñ webhook ===
if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    threading.Thread(target=lambda: flask_app.run(host="0.0.0.0", port=8080)).start()

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    async def set_webhook():
        url = f"https://{RENDER_HOST}/{BOT_TOKEN}"
        await application.bot.set_webhook(url)
        print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {url}")

    asyncio.run(set_webhook())
