import os
import re
import threading
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    filters
)
from dotenv import load_dotenv

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
RENDER_HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")

print(f"BOT_TOKEN: {BOT_TOKEN}")
print(f"RENDER_HOST: {RENDER_HOST}")

# === –°–ª–æ–≤–Ω–∏–∫ –≤—ñ–¥–º—ñ–Ω—é–≤–∞–Ω–Ω—è —ñ–º–µ–Ω ===
name_declensions = {
    "–ú–∞—à–∞": ("–ú–∞—à—É", "female"),
    "–î—ñ–º–∞": ("–î—ñ–º—É", "male"),
    "–°–∞—à–∞": ("–°–∞—à—É", "unisex")
}

# === –î—ñ—î—Å–ª–æ–≤–∞ ===
verb_conjugation = {
    "–æ–±—ñ–π–Ω—è—Ç–∏": ("–æ–±—ñ–π–Ω—è–≤", "ü§ó", "–æ–±—ñ–π–Ω—è–ª–∞"),
    "–≤–¥–∞—Ä–∏—Ç–∏": ("–≤–¥–∞—Ä–∏–≤", "üëä", "–≤–¥–∞—Ä–∏–ª–∞"),
    "–ø–æ—Ü—ñ–ª—É–≤–∞—Ç–∏": ("–ø–æ—Ü—ñ–ª—É–≤–∞–≤", "üíã", "–ø–æ—Ü—ñ–ª—É–≤–∞–ª–∞")
}


def convert_infinitive_to_past(verb, gender="male"):
    forms = verb_conjugation.get(verb.lower())
    if not forms:
        return (verb, "")
    return (forms[0] if gender == "male" else forms[2], forms[1])


def decline_name(name):
    return name_declensions.get(name, (name, "male"))


# === –û–±—Ä–æ–±–∫–∞ /start ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.first_name
    buttons = [
        [KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è")],
        [KeyboardButton("üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º"), KeyboardButton("üî• –ü–æ—á–∞—Ç–∏ —Ä–æ–ª—å–æ–≤—É –¥—ñ—é")],
        [KeyboardButton("üìú –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")]
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {user}! –Ø –≤–∞—à —Ä–æ–ª—å–æ–≤–∏–π –±–æ—Ç ü§ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –¥—ñ–π!",
        reply_markup=markup
    )


# === –û–±—Ä–æ–±–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ===
async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    user_name = update.effective_user.first_name

    match = re.match(r'^/([\w\s—ñ—Ç–∞—ñ—î—é]+?)\s+@(\S+)(?:\s+(.+))?', text, re.IGNORECASE)
    if not match:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç:\n/–¥—ñ—è @–Ü–º'—è [—Ç–µ–∫—Å—Ç]")
        return

    action_input = match.group(1).strip()
    target_raw = match.group(2).lstrip("@").strip()
    message_text = match.group(3) or ""

    target_name_accusative, gender = decline_name(target_raw)
    past_verb, emoji = convert_infinitive_to_past(action_input, gender)

    target_display = f"{emoji} *{target_name_accusative}*" if emoji else f"*{target_name_accusative}*"

    if message_text:
        response = f'‚ú® {user_name} {past_verb} {target_display} –∑—ñ —Å–ª–æ–≤–∞–º–∏: "{message_text}"'
    else:
        response = f'‚ú® {user_name} {past_verb} {target_display}'

    await update.message.reply_text(response, parse_mode="Markdown")


# === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è":
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/–¥—ñ—è @–Ü–º'—è —Ç–µ–∫—Å—Ç`\n–ü—Ä–∏–∫–ª–∞–¥: `/–æ–±—ñ–π–Ω—è—Ç–∏ @–ú–∞—à–∞ –¢–∏ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∞!`", parse_mode="Markdown")
    elif text == "üí¨ –ó–≤‚Äô—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º":
        await update.message.reply_text("–†–æ–∑—Ä–æ–±–Ω–∏–∫: @shadow_tar")
    elif text == "üî• –ü–æ—á–∞—Ç–∏ —Ä–æ–ª—å–æ–≤—É –¥—ñ—é":
        await update.message.reply_text("–î–æ–¥–∞–π—Ç–µ –º–µ–Ω–µ –≤ —á–∞—Ç: https://t.me/BugaichyBot?startgroup=botstart")
    elif text == "üìú –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏":
        await update.message.reply_text("\n".join(verb_conjugation.keys()), parse_mode="Markdown")


# === Flask App –¥–ª—è Render Webhook ===
flask_app = Flask(__name__)


@flask_app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "ok"


@flask_app.route("/")
def index():
    return "ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ webhook!"


# === –ó–∞–ø—É—Å–∫ Telegram Application ===
application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("start", start_command))
application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^/'), handle_command))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))


# === –°—Ç–∞—Ä—Ç –≤—Å—å–æ–≥–æ ===
async def on_startup(app):
    url = f"https://{RENDER_HOST}/{BOT_TOKEN}"
    await app.bot.set_webhook(url)
    print(f"‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {url}")


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    threading.Thread(target=lambda: flask_app.run(host="0.0.0.0", port=8080)).start()

    # Telegram bot –∑ webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=8080,
        webhook_url=f"https://{RENDER_HOST}/{BOT_TOKEN}",
        post_init=on_startup
    )
